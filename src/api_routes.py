import os
from dash.dependencies import Input, Output, State, ALL, MATCH
from dash import dcc
import ai
from ui_components import get_status_element

def register_api_callbacks(app):
    @app.callback(
        Output('question', 'data'),
        Input('query', 'value'),
        State('question', 'data'),
        prevent_initial_call=True)
    def question(query: str, question: dict):
        new_id = question['id'] + 1
        print(f"\n{'='*60}")
        print(f"üîç Êñ∞ÈóÆÈ¢ò [ID: {new_id}]: {query}")
        print(f"{'='*60}")
        return {'id': new_id, 'query': query}


    @app.callback(
        Output('annotated-question', 'data'),
        Input('question', 'data'),
        prevent_initial_call=True)
    def annotated_question(question: dict):
        print(f"\nüìã Á¨¨‰∏ÄÊ≠•ÔºöÂà§Êñ≠ÈóÆÈ¢òÁ±ªÂûã [ID: {question['id']}]")
        print(f"ÈóÆÈ¢ò: {question['query']}")
        
        try:
            provider = os.getenv('DEFAULT_PROVIDER', 'openrouter')
            api_key = os.getenv('OPENROUTER_API_KEY', '')
            model = os.getenv('OPENROUTER_MODEL', 'google/gemini-2.5-flash')
            
            print(f"üîß ÈÖçÁΩÆ: Êèê‰æõÂïÜ={provider}, Ê®°Âûã={model}")
            print(f"üöÄ Ê≠£Âú®Ë∞ÉÁî®AIÂà§Êñ≠ÈóÆÈ¢òÁ±ªÂûã...")
            
            is_yes_or_no_question = ai.is_yes_or_no_question(question['query'], api_key, provider, model)
            
            question_type = "ÊòØÈùûÈ¢ò" if is_yes_or_no_question else "ÂºÄÊîæÊÄßÈóÆÈ¢ò"
            print(f"‚úÖ ÈóÆÈ¢òÁ±ªÂûãÂà§Êñ≠ÂÆåÊàê: {question_type}")
            print(f"üìä Áä∂ÊÄÅÁ†ÅÂ∞ÜËÆæÁΩÆ‰∏∫: {'7312' if is_yes_or_no_question else '3023'}")

            return {
                'id': question['id'],
                'query': question['query'],
                'is_yes_or_no_question': is_yes_or_no_question,
                'error': None
            }
        except Exception as e:
            print(f"‚ùå ÈóÆÈ¢òÁ±ªÂûãÂà§Êñ≠Â§±Ë¥•: {str(e)}")
            return {
                'id': question['id'],
                'query': question['query'],
                'is_yes_or_no_question': False,
                'error': str(e)
            }


    @app.callback(
        Output('status', 'extention'),
        Input('question', 'data'),
        Input('annotated-question', 'data'))
    def extention(question: dict, annotated_question: dict):
        if question['id'] != annotated_question['id']:
            print(f"‚ö†Ô∏è  ID‰∏çÂåπÈÖçÔºåÁ≠âÂæÖÂêåÊ≠•... (ÈóÆÈ¢òID: {question['id']}, Ê≥®ÈáäID: {annotated_question['id']})")
            return '????'

        status_code = '7312' if annotated_question['is_yes_or_no_question'] else '3023'
        question_type = "ÊòØÈùûÈ¢ò" if annotated_question['is_yes_or_no_question'] else "ÂºÄÊîæÊÄßÈóÆÈ¢ò"
        print(f"üì° MAGIÁä∂ÊÄÅÁ†ÅÊõ¥Êñ∞: {status_code} ({question_type})")
        
        return status_code


    @app.callback(
        Output({'type': 'wise-man', 'name': MATCH}, 'answer'),
        Input('annotated-question', 'data'),
        State({'type': 'wise-man', 'name': MATCH}, 'personality'),
        prevent_initial_call=True)
    def wise_man_answer(question: dict, personality: str):
        personality_names = {
            'You are a scientist. Your goal is to further our understanding of the universe and advance our technological progress.': 'Melchior (ÁßëÂ≠¶ÂÆ∂)',
            'You are a mother. Your goal is to protect your children and ensure their well-being.': 'Balthasar (ÊØç‰∫≤)',
            'You are a woman. Your goal is to pursue love, dreams and desires.': 'Casper (Â•≥ÊÄß)'
        }
        
        personality_name = personality_names.get(personality, personality[:20] + "...")
        
        print(f"\nü§ñ Á¨¨‰∫åÊ≠•Ôºö{personality_name} ÂºÄÂßãÊÄùËÄÉ [ID: {question['id']}]")
        
        if question['error']:
            print(f"‚ùå {personality_name} Êî∂Âà∞ÈîôËØØ: {question['error']}")
            return {'id': question['id'], 'response': question['error'], 'status': 'error'}

        try:
            provider = os.getenv('DEFAULT_PROVIDER', 'openrouter')
            api_key = os.getenv('OPENROUTER_API_KEY', '')
            model = os.getenv('OPENROUTER_MODEL', 'google/gemini-2.5-flash')
            
            question_type = "ÊòØÈùûÈ¢ò" if question['is_yes_or_no_question'] else "ÂºÄÊîæÊÄßÈóÆÈ¢ò"
            print(f"üìù {personality_name} Â§ÑÁêÜ{question_type}: {question['query']}")
            print(f"üöÄ Ê≠£Âú®Ë∞ÉÁî®AIÁîüÊàêÂõûÁ≠î...")
            
            response_content = ai.get_structured_answer(
                question['query'], 
                personality, 
                question['is_yes_or_no_question'], 
                api_key, 
                provider, 
                model
            )
            
            print(f"üì• {personality_name} ÂéüÂßãÂìçÂ∫î:")
            print(f"   {response_content[:200]}{'...' if len(response_content) > 200 else ''}")

            answer, classification = ai.parse_structured_response(
                response_content, 
                question['is_yes_or_no_question']
            )
            
            print(f"üì§ {personality_name} Ëß£ÊûêÁªìÊûú:")
            print(f"   ÂõûÁ≠î: {answer[:100]}{'...' if len(str(answer)) > 100 else ''}")
            print(f"   ÂàÜÁ±ª: {classification['status']}")
            if classification.get('conditions'):
                print(f"   Êù°‰ª∂: {str(classification['conditions'])[:100]}{'...' if len(str(classification.get('conditions', ''))) > 100 else ''}")

            return {
                'id': question['id'], 
                'response': answer, 
                'status': classification['status'], 
                'conditions': classification.get('conditions'), 
                'error': None
            }

        except Exception as e:
            print(f"‚ùå {personality_name} Â§ÑÁêÜÂ§±Ë¥•: {str(e)}")
            return {'id': question['id'], 'response': None, 'status': 'error', 'conditions': None, 'error': str(e)}


    @app.callback(
        Output({'type': 'wise-man', 'name': MATCH}, 'question_id'),
        Input('question', 'data'))
    def wise_man_question_id(question: dict):
        return question['id']


    @app.callback(
        Output('response', 'question_id'),
        Input('question', 'data'))
    def response_question_id(question: dict):
        return question['id']


    @app.callback(
        Output('response', 'status', allow_duplicate=True),
        Input('question', 'data'),
        prevent_initial_call=True)
    def response_progress_status(question: dict):
        if question and question.get('query'):
            return 'progress'
        return 'standby'


    @app.callback(
        Output('response', 'status'),
        Output('response', 'answer_id'),
        Input({'type': 'wise-man', 'name': ALL}, 'answer'),
        Input('question', 'data'),
        prevent_initial_call=True)
    def response_status(answers: list, question: dict):
        if not question or not question.get('query'):
            return 'standby', 0
        
        if not answers or len(answers) < 3 or any(not answer for answer in answers):
            return 'progress', question['id']
        
        answer_id = min([answer['id'] for answer in answers])
        
        print(f"\nüèõÔ∏è  Á¨¨‰∏âÊ≠•ÔºöMAGIÁ≥ªÁªüÁªºÂêàÂÜ≥Á≠ñ [ID: {answer_id}]")
        print(f"Êî∂Âà∞ {len(answers)} ‰∏™Ë¥§ËÄÖÁöÑÂõûÁ≠î:")
        
        personality_names = ['Melchior (ÁßëÂ≠¶ÂÆ∂)', 'Balthasar (ÊØç‰∫≤)', 'Casper (Â•≥ÊÄß)']
        for i, answer in enumerate(answers):
            name = personality_names[i] if i < len(personality_names) else f"Ë¥§ËÄÖ{i+1}"
            print(f"   {name}: {answer['status']}")
        
        status = 'info'

        if any([answer['status'] == 'error' for answer in answers]):
            status = 'error'
            print(f"‚ùå ÊúÄÁªàÂÜ≥Á≠ñ: ERROR (ÊúâË¥§ËÄÖÂá∫Áé∞ÈîôËØØ)")
        elif any([answer['status'] == 'no' for answer in answers]):
            status = 'no'
            print(f"üö´ ÊúÄÁªàÂÜ≥Á≠ñ: NO (Ëá≥Â∞ë‰∏Ä‰∏™Ë¥§ËÄÖÂèçÂØπ)")
        elif any([answer['status'] == 'conditional' for answer in answers]):
            status = 'conditional'
            print(f"‚ö†Ô∏è  ÊúÄÁªàÂÜ≥Á≠ñ: CONDITIONAL (ÊúâÊù°‰ª∂ÂêåÊÑè)")
        elif all([answer['status'] == 'yes' for answer in answers]):
            status = 'yes'
            print(f"‚úÖ ÊúÄÁªàÂÜ≥Á≠ñ: YES (ÊâÄÊúâË¥§ËÄÖÂêåÊÑè)")
        else:
            print(f"‚ÑπÔ∏è  ÊúÄÁªàÂÜ≥Á≠ñ: INFO (‰ø°ÊÅØÊÄßÂõûÁ≠î)")

        print(f"{'='*60}")
        print(f"üéØ MAGIÁ≥ªÁªüÂÜ≥Á≠ñÂÆåÊàê [ID: {answer_id}] - Áä∂ÊÄÅ: {status.upper()}")
        print(f"{'='*60}\n")

        return status, answer_id


    @app.callback(
        Output('melchior-content', 'children'),
        Output('melchior-status', 'children'),
        Input({'type': 'wise-man', 'name': 'melchior'}, 'answer'))
    def update_melchior_answer(answer: dict):
        if answer and answer.get('response'):
            status_key = answer.get('status', 'info')
            return str(answer['response']), get_status_element(status_key)
        return 'ÂæÖÊ©ü‰∏≠...', get_status_element('standby')


    @app.callback(
        Output('balthasar-content', 'children'),
        Output('balthasar-status', 'children'),
        Input({'type': 'wise-man', 'name': 'balthasar'}, 'answer'))
    def update_balthasar_answer(answer: dict):
        if answer and answer.get('response'):
            status_key = answer.get('status', 'info')
            return str(answer['response']), get_status_element(status_key)
        return 'ÂæÖÊ©ü‰∏≠...', get_status_element('standby')


    @app.callback(
        Output('casper-content', 'children'),
        Output('casper-status', 'children'),
        Input({'type': 'wise-man', 'name': 'casper'}, 'answer'))
    def update_casper_answer(answer: dict):
        if answer and answer.get('response'):
            status_key = answer.get('status', 'info')
            return str(answer['response']), get_status_element(status_key)
        return 'ÂæÖÊ©ü‰∏≠...', get_status_element('standby')


    @app.callback(
        Output('query', 'value', allow_duplicate=True),
        Input('response', 'status'),
        State('query', 'value'),
        prevent_initial_call=True
    )
    def clear_input_after_completion(status, current_query):
        if status != 'progress' and current_query:
            print(f"‚úÖ ÂõûÁ≠îÂÆåÊàêÔºåÊ∏ÖÁ©∫ËæìÂÖ•Ê°Ü")
            return ''
        return current_query